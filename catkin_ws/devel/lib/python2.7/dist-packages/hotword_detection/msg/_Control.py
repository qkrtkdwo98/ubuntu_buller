# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hotword_detection/Control.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Control(genpy.Message):
  _md5sum = "491a05910e95215173090f79f7126129"
  _type = "hotword_detection/Control"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 detect_word
uint16 send_goal
uint16 detect_object
float32[] object_position
float32[] start_arm
bool finish_arm
bool go_back
"""
  __slots__ = ['detect_word','send_goal','detect_object','object_position','start_arm','finish_arm','go_back']
  _slot_types = ['uint16','uint16','uint16','float32[]','float32[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detect_word,send_goal,detect_object,object_position,start_arm,finish_arm,go_back

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Control, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.detect_word is None:
        self.detect_word = 0
      if self.send_goal is None:
        self.send_goal = 0
      if self.detect_object is None:
        self.detect_object = 0
      if self.object_position is None:
        self.object_position = []
      if self.start_arm is None:
        self.start_arm = []
      if self.finish_arm is None:
        self.finish_arm = False
      if self.go_back is None:
        self.go_back = False
    else:
      self.detect_word = 0
      self.send_goal = 0
      self.detect_object = 0
      self.object_position = []
      self.start_arm = []
      self.finish_arm = False
      self.go_back = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3H().pack(_x.detect_word, _x.send_goal, _x.detect_object))
      length = len(self.object_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.object_position))
      length = len(self.start_arm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.start_arm))
      _x = self
      buff.write(_get_struct_2B().pack(_x.finish_arm, _x.go_back))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.detect_word, _x.send_goal, _x.detect_object,) = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.start_arm = s.unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.finish_arm, _x.go_back,) = _get_struct_2B().unpack(str[start:end])
      self.finish_arm = bool(self.finish_arm)
      self.go_back = bool(self.go_back)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3H().pack(_x.detect_word, _x.send_goal, _x.detect_object))
      length = len(self.object_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.object_position.tostring())
      length = len(self.start_arm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.start_arm.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.finish_arm, _x.go_back))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.detect_word, _x.send_goal, _x.detect_object,) = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.start_arm = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 2
      (_x.finish_arm, _x.go_back,) = _get_struct_2B().unpack(str[start:end])
      self.finish_arm = bool(self.finish_arm)
      self.go_back = bool(self.go_back)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3H = None
def _get_struct_3H():
    global _struct_3H
    if _struct_3H is None:
        _struct_3H = struct.Struct("<3H")
    return _struct_3H
