// Generated by gencpp from file hotword_detection/Control.msg
// DO NOT EDIT!


#ifndef HOTWORD_DETECTION_MESSAGE_CONTROL_H
#define HOTWORD_DETECTION_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hotword_detection
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : detect_word(0)
    , send_goal(0)
    , detect_object(0)
    , object_position()
    , start_arm()
    , finish_arm(false)
    , go_back(false)  {
    }
  Control_(const ContainerAllocator& _alloc)
    : detect_word(0)
    , send_goal(0)
    , detect_object(0)
    , object_position(_alloc)
    , start_arm(_alloc)
    , finish_arm(false)
    , go_back(false)  {
  (void)_alloc;
    }



   typedef uint16_t _detect_word_type;
  _detect_word_type detect_word;

   typedef uint16_t _send_goal_type;
  _send_goal_type send_goal;

   typedef uint16_t _detect_object_type;
  _detect_object_type detect_object;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _object_position_type;
  _object_position_type object_position;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _start_arm_type;
  _start_arm_type start_arm;

   typedef uint8_t _finish_arm_type;
  _finish_arm_type finish_arm;

   typedef uint8_t _go_back_type;
  _go_back_type go_back;





  typedef boost::shared_ptr< ::hotword_detection::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hotword_detection::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::hotword_detection::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::hotword_detection::Control > ControlPtr;
typedef boost::shared_ptr< ::hotword_detection::Control const> ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hotword_detection::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hotword_detection::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hotword_detection::Control_<ContainerAllocator1> & lhs, const ::hotword_detection::Control_<ContainerAllocator2> & rhs)
{
  return lhs.detect_word == rhs.detect_word &&
    lhs.send_goal == rhs.send_goal &&
    lhs.detect_object == rhs.detect_object &&
    lhs.object_position == rhs.object_position &&
    lhs.start_arm == rhs.start_arm &&
    lhs.finish_arm == rhs.finish_arm &&
    lhs.go_back == rhs.go_back;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hotword_detection::Control_<ContainerAllocator1> & lhs, const ::hotword_detection::Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hotword_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hotword_detection::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hotword_detection::Control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hotword_detection::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hotword_detection::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hotword_detection::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hotword_detection::Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hotword_detection::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "491a05910e95215173090f79f7126129";
  }

  static const char* value(const ::hotword_detection::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x491a05910e952151ULL;
  static const uint64_t static_value2 = 0x73090f79f7126129ULL;
};

template<class ContainerAllocator>
struct DataType< ::hotword_detection::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hotword_detection/Control";
  }

  static const char* value(const ::hotword_detection::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hotword_detection::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 detect_word\n"
"uint16 send_goal\n"
"uint16 detect_object\n"
"float32[] object_position\n"
"float32[] start_arm\n"
"bool finish_arm\n"
"bool go_back\n"
;
  }

  static const char* value(const ::hotword_detection::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hotword_detection::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detect_word);
      stream.next(m.send_goal);
      stream.next(m.detect_object);
      stream.next(m.object_position);
      stream.next(m.start_arm);
      stream.next(m.finish_arm);
      stream.next(m.go_back);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hotword_detection::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hotword_detection::Control_<ContainerAllocator>& v)
  {
    s << indent << "detect_word: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.detect_word);
    s << indent << "send_goal: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.send_goal);
    s << indent << "detect_object: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.detect_object);
    s << indent << "object_position[]" << std::endl;
    for (size_t i = 0; i < v.object_position.size(); ++i)
    {
      s << indent << "  object_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.object_position[i]);
    }
    s << indent << "start_arm[]" << std::endl;
    for (size_t i = 0; i < v.start_arm.size(); ++i)
    {
      s << indent << "  start_arm[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.start_arm[i]);
    }
    s << indent << "finish_arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finish_arm);
    s << indent << "go_back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.go_back);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOTWORD_DETECTION_MESSAGE_CONTROL_H
